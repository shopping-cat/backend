generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                 @id
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  point             Int                    @default(0)
  name              String?
  photo             String?
  cart              CartItem[]
  coupons           Coupon[]
  itemReviews       ItemReview[]
  orders            Order[]
  payments          Payment[]
  pointReceipts     PointReceipt[]
  searchKeywords    SearchKeyword[]
  certificatedInfo  UserCertificatedInfo?
  deliveryInfo      UserDeliveryInfo?
  refundBankAccount UserRefundBankAccount?
  itemLikes         Item[]
  itemReviewLikes   ItemReview[]           @relation("UserItemReviewLike")
  itemReviewUnlikes ItemReview[]           @relation("UserItemReviewUnlike")
}

model UserCertificatedInfo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  phone     String
  name      String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model UserRefundBankAccount {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bankName      String
  accountNumber String
  ownerName     String
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
}

model UserDeliveryInfo {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  postCode      String
  address       String
  addressDetail String
  name          String
  phone         String
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
}

model SearchKeyword {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  keyword   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model Coupon {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  image        String
  name         String
  period       DateTime
  minItemPrice Int?
  maxSalePrice Int?
  salePercent  Int?
  salePrice    Int?
  userId       String?
  orderId      Int?
  order        Order?   @relation(fields: [orderId], references: [id])
  user         User?    @relation(fields: [userId], references: [id])

  @@index([orderId], name: "orderId")
  @@index([userId], name: "userId")
}

model PointReceipt {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  point     Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  option    Json?
  itemId    Int
  userId    String
  num       Int
  item      Item     @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([itemId], name: "itemId")
  @@index([userId], name: "userId")
}

model Order {
  id                     Int         @id @default(autoincrement())
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  state                  String
  itemPrice              Int
  itemOptionPrice        Int
  itemSale               Int
  num                    Int
  itemOption             Json?
  deliveryCompletionDate DateTime?
  reason                 String?
  reasonDetail           String?     @db.Text
  cartItemId             Int
  userId                 String
  paymentId              String
  itemId                 Int
  deliveryNumber         String?
  deliveryCompany        String?
  totalPrice             Int
  item                   Item        @relation(fields: [itemId], references: [id])
  payment                Payment     @relation(fields: [paymentId], references: [id])
  user                   User        @relation(fields: [userId], references: [id])
  coupons                Coupon[]
  itemReview             ItemReview?

  @@index([itemId], name: "itemId")
  @@index([paymentId], name: "paymentId")
  @@index([userId], name: "userId")
}

model Payment {
  id                 String   @id
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  name               String
  state              String
  cancelReason       String?
  paymentMethod      String
  price              Int
  deliveryPrice      Int
  extraDeliveryPrice Int
  itemSale           Int
  couponSale         Int
  pointSale          Int
  totalPrice         Int
  address            String
  addressName        String
  addressPhone       String
  postCode           String
  deliveryMemo       String
  vBankNum           String?
  vBankDate          String?
  vBankName          String?
  userId             String
  cancelPoint        Int      @default(0)
  cancelPrice        Int      @default(0)
  user               User     @relation(fields: [userId], references: [id])
  orders             Order[]

  @@index([userId], name: "userId")
}

model ItemReview {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  likeNum     Int               @default(0)
  content     String?           @db.Text
  rate        Int
  userId      String
  itemId      Int
  orderId     Int               @unique
  item        Item              @relation(fields: [itemId], references: [id])
  order       Order             @relation(fields: [orderId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  images      ItemReviewImage[]
  userLikes   User[]            @relation("UserItemReviewLike")
  userUnlikes User[]            @relation("UserItemReviewUnlike")

  @@index([itemId], name: "itemId")
  @@index([userId], name: "userId")
}

model ItemReviewImage {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  uri          String
  itemReviewId Int?
  itemReview   ItemReview? @relation(fields: [itemReviewId], references: [id])

  @@index([itemReviewId], name: "itemReviewId")
}

model Item {
  id                 Int          @id @default(autoincrement())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  likeNum            Int          @default(0)
  state              String       @default("상품등록요청")
  deliveryPrice      Int
  extraDeliveryPrice Int
  name               String
  price              Int
  sale               Int          @default(0)
  option             Json?
  requireInformation Json
  html               String       @db.Text
  shopId             Int?
  category1          String?
  category2          String?
  targetItemId       Int?         @unique
  shop               Shop?        @relation(fields: [shopId], references: [id])
  targetItem         Item?        @relation("ItemToItem", fields: [targetItemId], references: [id])
  cart               CartItem[]
  updateItem         Item?        @relation("ItemToItem")
  images             ItemImage[]
  reviews            ItemReview[]
  orders             Order[]
  userLikes          User[]

  @@index([shopId], name: "shopId")
}

model ItemImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  uri       String
  itemId    Int?
  item      Item?    @relation(fields: [itemId], references: [id])

  @@index([itemId], name: "itemId")
}

model Shop {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  shopName     String   @unique
  shopImage    String
  refundInfo   String?  @db.Text
  exchangeInfo String?  @db.Text
  items        Item[]
  partner      Partner?
  seller       Seller?
}

model Seller {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  licenseNumber String   @unique
  email         String   @unique
  shopId        Int      @unique
  shop          Shop     @relation(fields: [shopId], references: [id])
}

model Partner {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  licenseNumber String   @unique
  email         String   @unique
  shopId        Int      @unique
  shop          Shop     @relation(fields: [shopId], references: [id])
}
