generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "./"
  outputName = "prisma.sql"
}

model User {
  id                String                 @id
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  point             Int                    @default(0)
  name              String?
  photo             String?
  cart              CartItem[]
  coupons           Coupon[]
  pointReceipts     PointReceipt[]
  itemReviews       ItemReview[]
  orders            Order[]
  payments          Payment[]
  searchKeywords    SearchKeyword[]
  certificatedInfo  UserCertificatedInfo?
  refundBankAccount UserRefundBankAccount?
  deliveryInfo      UserDeliveryInfo?
  itemLikes         Item[]
  itemReviewLikes   ItemReview[]           @relation("UserItemReviewLike")
  itemReviewUnlikes ItemReview[]           @relation("UserItemReviewUnlike")
}

model UserCertificatedInfo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  phone     String
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model UserRefundBankAccount {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bankName      String
  accountNumber String
  ownerName     String
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
}

model UserDeliveryInfo {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  postCode      String
  address       String
  addressDetail String
  name          String
  phone         String
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
}

model SearchKeyword {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  keyword   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model Coupon {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  image        String
  name         String
  period       DateTime
  minItemPrice Int?
  maxSalePrice Int?
  salePercent  Int?
  salePrice    Int?
  userId       String?
  orderId      Int?     @unique
  order        Order?   @relation(fields: [orderId], references: [id])
  user         User?    @relation(fields: [userId], references: [id])
}

model PointReceipt {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  point     Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  option    Json? // { data:number[] }
  itemId    Int
  userId    String
  num       Int
  item      Item     @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([itemId], name: "itemId")
  @@index([userId], name: "userId")
}

model Order {
  id                     Int         @id @default(autoincrement())
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  state                  String
  // 상품 상세
  itemPrice              Int // 기본가격
  itemOptionPrice        Int // 옵션 가격
  itemSale               Int // 세일률
  num                    Int
  itemOption             Json? // { data:string[] }
  //
  deliveryCompletionDate DateTime? // 배송 도착일
  reason                 String? // 환불 | 교환 사유
  cartItemId             Int // 카트에서 삭제할때 사용할 일회성 아이디
  userId                 String
  paymentId              String
  itemId                 Int
  coupons                Coupon[]
  itemReview             ItemReview?
  payment                Payment     @relation(fields: [paymentId], references: [id])
  user                   User        @relation(fields: [userId], references: [id])
  item                   Item        @relation(fields: [itemId], references: [id])

  @@index([paymentId], name: "paymentId")
  @@index([userId], name: "userId")
}

model Payment {
  id                 String   @id
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  name               String
  state              String
  // 결제 취소
  cancelReason       String?
  // 결제 정보
  paymentMethod      String
  price              Int
  deliveryPrice      Int
  extraDeliveryPrice Int
  itemSale           Int
  couponSale         Int
  pointSale          Int
  totalPrice         Int
  // 배송지 정보
  address            String
  addressName        String
  addressPhone       String
  postCode           String
  // 배송 매모
  deliveryMemo       String
  // 가상계좌 정보
  vBankNum           String?
  vBankDate          String?
  vBankName          String?
  //
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  orders             Order[]

  @@index([userId], name: "userId")
}

model ItemReview {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  likeNum     Int               @default(0)
  content     String?
  rate        Int
  userId      String
  itemId      Int
  orderId     Int               @unique
  item        Item              @relation(fields: [itemId], references: [id])
  order       Order             @relation(fields: [orderId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  images      ItemReviewImage[]
  userLikes   User[]            @relation("UserItemReviewLike")
  userUnlikes User[]            @relation("UserItemReviewUnlike")

  @@index([itemId], name: "itemId")
  @@index([userId], name: "userId")
}

model ItemReviewImage {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  uri          String
  itemReviewId Int?
  itemReview   ItemReview? @relation(fields: [itemReviewId], references: [id])

  @@index([itemReviewId], name: "itemReviewId")
}

model Item {
  id                 Int          @id @default(autoincrement())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  likeNum            Int          @default(0)
  state              ItemState    @default(sale)
  deliveryPrice      Int
  extraDeliveryPrice Int
  name               String
  price              Int
  sale               Int          @default(0)
  option             Json?
  requireInformation Json
  html               String
  category           String
  partnerId          Int
  partner            Partner      @relation(fields: [partnerId], references: [id])
  cart               CartItem[]
  images             ItemImage[]
  reviews            ItemReview[]
  orders             Order[]
  userLikes          User[]

  @@index([partnerId], name: "partnerId")
}

model ItemImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  uri       String
  itemId    Int
  item      Item     @relation(fields: [itemId], references: [id])

  @@index([itemId], name: "itemId")
}

model Partner {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  email         String   @unique
  shopName      String   @unique
  licenseNumber String
  shopImage     String
  items         Item[]
}

enum ItemState {
  sale
  stop
  noStock
}
