generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                    @id @default(autoincrement())
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  email             String                 @unique
  Coupons           Coupon[]
  Orders            Order[]
  Payments          Payment[]
  RefundBankAccount UserRefundBankAccount?
  ItemReviews       ItemReview[] // 내가 쓴 리뷰
  ItemReviewLikes   ItemReview[]           @relation("UserItemReviewLike") // 좋아요 누른 리뷰
  ItemReviewUnlikes ItemReview[]           @relation("UserItemReviewUnlike") // 싫어요 누른 리뷰
  ItemLikes         Item[]
  Cart              CartItem[]
  SearchKeywords    SearchKeyword[]
}

model UserRefundBankAccount {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bankName      String
  accountNumber Int
  ownerName     String
  User          User     @relation(fields: [userId], references: [id])
  userId        Int
}

model SearchKeyword {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  keyword   String
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Coupon {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  period       DateTime
  minItemPrice Int?
  maxSalePrice Int?
  salePercent  Int?
  salePrice    Int?
  User         User     @relation(fields: [userId], references: [id])
  Order        Order?   @relation(fields: [orderId], references: [id])
  userId       Int
  orderId      Int?
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  option    Json
  Item      Item     @relation(fields: [itemId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
  itemId    Int
  userId    Int
}

model Order {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  address         String
  phone           String
  state           String
  reason          String?
  deliveryMessage String?
  itemOption      String?
  pointSale       Int
  Coupon          Coupon?
  ItemReview      ItemReview?
  Items           Item[]
  User            User        @relation(fields: [userId], references: [id])
  Payment         Payment     @relation(fields: [paymentId], references: [id])
  userId          Int
  paymentId       Int
}

model Payment {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  state           String
  paymentMethod   String
  cashReceipt     String
  cashReceiptData String?
  refundMethod    RefundMethod?
  price           Int
  itemSale        Int
  couponSale      Int
  pointSale       Int
  totalPrice      Int
  Orders          Order[]
  User            User          @relation(fields: [userId], references: [id])
  userId          Int
}

model ItemReview {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  content     String?
  rate        Int
  UserLikes   User[]            @relation("UserItemReviewLike")
  UserUnlikes User[]            @relation("UserItemReviewUnlike")
  Images      ItemReviewImage[]
  User        User              @relation(fields: [userId], references: [id])
  Item        Item              @relation(fields: [itemId], references: [id])
  Order       Order             @relation(fields: [orderId], references: [id])
  userId      Int
  itemId      Int
  orderId     Int
}

model ItemReviewImage {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  uri          String
  ItemReview   ItemReview @relation(fields: [itemReviewId], references: [id])
  itemReviewId Int
}

model Item {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  state     ItemState
  name      String
  price     Int
  sale      Int
  option    Json
  html      String
  category  Category
  Images    ItemImage[]
  Orders    Order[]
  Reviews   ItemReview[]
  Cart      CartItem[]
  UserLikes User[]
  Partner   Partner      @relation(fields: [partnerId], references: [id])
  partnerId Int
}

model ItemImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  uri       String
  Item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
}

model Partner {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  email         String   @unique
  shopName      String   @unique
  licenseNumber String
  shopImage     String
  Item          Item[]
}

enum Category {
  feed
}

enum RefundMethod {
  cardCancel
  refundAccout
}

enum ItemState {
  sale
  stop
  noStock
}
