generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                 @id
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  name              String?
  photo             String?
  phone             String?
  cart              CartItem[]
  coupons           Coupon[]
  itemReviews       ItemReview[]
  orders            Order[]
  payments          Payment[]
  searchKeywords    SearchKeyword[]
  refundBankAccount UserRefundBankAccount?
  itemLikes         Item[]
  itemReviewLikes   ItemReview[]           @relation("UserItemReviewLike")
  itemReviewUnlikes ItemReview[]           @relation("UserItemReviewUnlike")
}

model UserRefundBankAccount {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bankName      String
  accountNumber Int
  ownerName     String
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
}

model SearchKeyword {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  keyword   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model Coupon {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  period       DateTime
  minItemPrice Int?
  maxSalePrice Int?
  salePercent  Int?
  salePrice    Int?
  userId       String
  orderId      Int?     @unique
  order        Order?   @relation(fields: [orderId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  option    Json? // { data:number[] }
  itemId    Int
  userId    String
  item      Item     @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([itemId], name: "itemId")
  @@index([userId], name: "userId")
}

model Order {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  address         String
  phone           String
  state           String
  reason          String?
  deliveryMessage String?
  itemOption      Json?
  pointSale       Int
  userId          String
  paymentId       Int
  itemId          Int
  payment         Payment     @relation(fields: [paymentId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  coupon          Coupon?
  itemReview      ItemReview?
  item            Item        @relation(fields: [itemId], references: [id])

  @@index([paymentId], name: "paymentId")
  @@index([userId], name: "userId")
}

model Payment {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  state           String
  paymentMethod   String
  cashReceipt     String
  cashReceiptData String?
  refundMethod    RefundMethod?
  price           Int
  itemSale        Int
  couponSale      Int
  pointSale       Int
  totalPrice      Int
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  orders          Order[]

  @@index([userId], name: "userId")
}

model ItemReview {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  likeNum     Int               @default(0)
  content     String?
  rate        Int
  userId      String
  itemId      Int
  orderId     Int               @unique
  item        Item              @relation(fields: [itemId], references: [id])
  order       Order             @relation(fields: [orderId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  images      ItemReviewImage[]
  userLikes   User[]            @relation("UserItemReviewLike")
  userUnlikes User[]            @relation("UserItemReviewUnlike")

  @@index([itemId], name: "itemId")
  @@index([userId], name: "userId")
}

model ItemReviewImage {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  uri          String
  itemReviewId Int
  itemReview   ItemReview @relation(fields: [itemReviewId], references: [id])

  @@index([itemReviewId], name: "itemReviewId")
}

model Item {
  id                 Int          @id @default(autoincrement())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  likeNum            Int          @default(0)
  state              ItemState    @default(sale)
  isFreeDelivery     Boolean
  name               String
  price              Int
  sale               Int          @default(0)
  option             Json?
  requireInformation Json
  html               String
  category           String
  partnerId          Int
  partner            Partner      @relation(fields: [partnerId], references: [id])
  cart               CartItem[]
  images             ItemImage[]
  reviews            ItemReview[]
  orders             Order[]
  userLikes          User[]

  @@index([partnerId], name: "partnerId")
}

model ItemImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  uri       String
  itemId    Int
  item      Item     @relation(fields: [itemId], references: [id])

  @@index([itemId], name: "itemId")
}

model Partner {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  email         String   @unique
  shopName      String   @unique
  licenseNumber String
  shopImage     String
  items         Item[]
}

enum RefundMethod {
  cardCancel
  refundAccout
}

enum ItemState {
  sale
  stop
  noStock
}
